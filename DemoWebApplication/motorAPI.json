{
  "openapi": "3.0.1",
  "info": {
    "title": "MotorAPI",
    "description": "OpenAPI for TestWebApplication",
    "contact": {
      "name": "Nick Pivanov",
      "email": "nick_anapa@mail.ru"
    },
    "version": "v1"
  },
  "paths": {
    "/Measurements": {
      "get": {
        "tags": [
          "Measurements"
        ],
        "summary": "Get all measurements from database",
        "operationId": "GetMeasurements",
        "responses": {
          "200": {
            "description": "Returns collection of Measurements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Measurement"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database has no items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Motors": {
      "get": {
        "tags": [
          "Motors"
        ],
        "summary": "Get all Motors from database",
        "operationId": "GetAllMotors",
        "responses": {
          "200": {
            "description": "Returns collection of Motors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Motor"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database has no items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Motors"
        ],
        "summary": "Add new Motor object to database. \r\nValues for properties Name and Type are required.\r\nType values are:\r\n0 - Electric\r\n1 - Hydraulic\r\n2 - Combustion",
        "operationId": "AddMotor",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/MotorType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Seccesful result of procedure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Motor"
                }
              }
            }
          },
          "400": {
            "description": "Error while adding new object to database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Motors"
        ],
        "summary": "Sends a request on updating selected Motor",
        "operationId": "UpdateMotor",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Motor"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Motor"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Motor"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Motor"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Seccesfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Motor"
                }
              }
            }
          },
          "400": {
            "description": "Error while updating data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Motors/{id}": {
      "get": {
        "tags": [
          "Motors"
        ],
        "summary": "Get the Motor by Id",
        "operationId": "GetMotorById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniq identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Motor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Motor"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find a Motor by the requested id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Motors"
        ],
        "summary": "Delete a Motor from database by selected Id",
        "operationId": "DeleteMotor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Error while deleting object from database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Characteristic": {
        "required": [
          "motorId",
          "motorPropertyId",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "motorId": {
            "type": "integer",
            "format": "int32"
          },
          "motor": {
            "$ref": "#/components/schemas/Motor"
          },
          "motorPropertyId": {
            "type": "integer",
            "format": "int32"
          },
          "motorProperty": {
            "$ref": "#/components/schemas/MotorProperty"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Measurement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "motorId": {
            "type": "integer",
            "format": "int32"
          },
          "motor": {
            "$ref": "#/components/schemas/Motor"
          },
          "motorPropertyId": {
            "type": "integer",
            "format": "int32"
          },
          "motorProperty": {
            "$ref": "#/components/schemas/MotorProperty"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Motor": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 50,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/MotorType"
          },
          "characteristics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Characteristic"
            },
            "nullable": true
          },
          "measurementsLog": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Measurement"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MotorProperty": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
            "motorType": {
                "$ref": "#/components/schemas/MotorType",
                "nullable": true
            }
        },
        "additionalProperties": false
      },
      "MotorType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      }
    }
  }
}