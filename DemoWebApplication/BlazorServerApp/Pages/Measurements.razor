@page "/measurements"
@inject IHttpClientFactory HttpClientFactory

<h3>Measurements</h3>
<div class="input-group" style="margin-bottom:1px">
    <input class="text text-reset border-secondary" type="text" data-toggle="tooltip" data-placement="bottom" title="Enter value to filter"
           placeholder="Motor name" @bind-value="@FilterValue" />
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" data-toggle="tooltip" data-placement="bottom" title="Dismiss filtering"
                @onclick="(e => { FilterValue = string.Empty; OrderTableData(FilterValue); })">x</button>
    </div>
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" data-toggle="tooltip" data-placement="bottom" title="Filter by Motor name"
                @onclick="(e => OrderTableData(FilterValue))">Filter</button>
    </div>
</div>

@if (viewModel is null)
{<a>Loading data...</a>}
else
{
    <div>
        <table class="table table-bordered table-sm">
            <thead class="thead-dark">
                <tr>
                    <th>
                        <button class="btn btn-link" type="button" data-toggle="tooltip" data-placement="bottom" title="Click to order by Time"
                                @onclick="(e => OrderTableData(FilterValue, sortOrder: viewModel.SortViewModel.DateSort))">Time</button>
                    </th>
                    <th>
                        <button class="btn btn-link" type="button" data-toggle="tooltip" data-placement="bottom" title="Click to order by Motor name"
                                @onclick="(e => OrderTableData(FilterValue, sortOrder: viewModel.SortViewModel.MotorSort))">Motor</button>
                    </th>
                    <th>
                        <button class="btn btn-link" type="button" data-toggle="tooltip" data-placement="bottom" title="Click to order by Property name"
                                @onclick="(e => OrderTableData(FilterValue, sortOrder: viewModel.SortViewModel.PropSort))">Property</button>
                    </th>
                    <th>
                        <button class="btn btn-link" type="button" data-toggle="tooltip" data-placement="bottom" title="Click to order by Value"
                                @onclick="(e => OrderTableData(FilterValue, sortOrder: viewModel.SortViewModel.ValueSort))">Value</button>
                    </th>
                </tr>
            </thead>
            <tbody>
                 @foreach (var m in MeasurementsList)
                 {
                     <tr data-bind="@m">
                         <td>@m.Time.TimeOfDay</td>
                         <td>@m.Motor.Name</td>
                         <td>@m.MotorProperty.Name</td>
                         <td>@m.Value</td>
                     </tr>
                 }
            </tbody>
        </table>

        <div class="container m-0">
            <div class="row justify-content-lg-center">
                <div class="col col-lg-2 border-bottom" />
                <div class="col-md-auto">
                    <a>Page @viewModel.PageViewModel.PageNumber</a>
                </div>
                <div class="col col-lg-2 border-bottom" />
            </div>
        </div>

        <div class="container m-1">
            <div class="row justify-content-lg-center">
                <div class="col col-lg-2" />
                <div class="col-md-auto">
                    <div class="btn-group-sm justify-content-sm-center border-bottom">
                        @if (viewModel.PageViewModel.HasPreviousPage)
                        {

                            <button class="btn btn-outline-dark"
                                    @onclick="(e => OrderTableData(viewModel.FilterViewModel.SelectedValue, sortOrder: viewModel.SortViewModel.Current, page: viewModel.PageViewModel.PageNumber - 1))">
                                <i class="oi oi-chevron-left" /> Previous
                            </button>
                        }

                        @foreach (var page in pages)
                        {
                            <button class="btn btn-outline-dark"
                                    @onclick="(e => OrderTableData(viewModel.FilterViewModel.SelectedValue, page, viewModel.SortViewModel.Current))">
                                @(page)
                            </button>
                        }

                        @if (viewModel.PageViewModel.HasNextPage)
                        {
                            <button class="btn btn-outline-dark"
                                    @onclick="(e => OrderTableData(viewModel.FilterViewModel.SelectedValue, sortOrder: viewModel.SortViewModel.Current, page: viewModel.PageViewModel.PageNumber + 1))">
                                Next <i class="oi oi-chevron-right" />
                            </button>

                        }
                    </div>
                </div>
                <div class="col col-lg-2" />
            </div>
        </div> 
        
    </div>
}

@code {
    private IHttpClientFactory httpClientFactory;
    private HttpClient httpClient;
    private MotorAPI client;

    private List<Measurement> MeasurementsList { get; set; }
    private static List<Measurement> BaseList { get; set; }

    MeasurementsViewModel viewModel { get; set; }
    private string FilterValue { get; set; }
    private List<int> pages = new();
    private int totalMeasurementElements { get; set; }

    protected override async Task OnInitializedAsync()
    {
        httpClientFactory = HttpClientFactory;
        httpClient = httpClientFactory.CreateClient("motorAPI");
        client = new("", httpClient);

        await GetMeasurements();
    }

    private async Task GetMeasurements()
    {
        BaseList = (await client.GetMeasurementsAsync()).ToList();
        MeasurementsList = BaseList;
        OrderTableData(FilterValue);
        totalMeasurementElements = MeasurementsList.Count();
        pages = new();
        for (int page = 0; page < viewModel.PageViewModel.TotalPages; page++)
            pages.Add(page + 1);
    }

    #region filtering/sorting/pagination

    private void OrderTableData(string filterValue, int page = 1, SortState sortOrder = SortState.DateAsc)
    {
        int pageSize = 7;

        //filtering

        if (!String.IsNullOrEmpty(filterValue))
            MeasurementsList = BaseList.Where(t => t.Motor.Name.Contains(filterValue.Trim())).ToList();
        else MeasurementsList = BaseList;

        //sorting
        switch (sortOrder)
        {
            case SortState.DateDesc: MeasurementsList = MeasurementsList.OrderByDescending(n => n.Time).ToList(); break;
            case SortState.MotorAsc: MeasurementsList = MeasurementsList.OrderBy(n => n.Motor.Name).ToList(); break;
            case SortState.MotorDesc: MeasurementsList = MeasurementsList.OrderByDescending(n => n.Motor.Name).ToList(); break;
            case SortState.PropAsc: MeasurementsList = MeasurementsList.OrderBy(n => n.MotorProperty.Name).ToList(); break;
            case SortState.PropDesc: MeasurementsList = MeasurementsList.OrderByDescending(n => n.MotorProperty.Name).ToList(); break;
            case SortState.ValueAsc: MeasurementsList = MeasurementsList.OrderBy(n => n.Value).ToList(); break;
            case SortState.ValueDesc: MeasurementsList = MeasurementsList.OrderByDescending(n => n.Value).ToList(); break;


            default: MeasurementsList = MeasurementsList.OrderBy(n => n.Time).ToList(); break;
        }

        //paging
        var count = MeasurementsList.Count();
        MeasurementsList = MeasurementsList.Skip((page - 1) * pageSize).Take(pageSize).ToList();

        pages.Clear();
        for (int p = 0; p < count/pageSize; p++)
            pages.Add(p + 1);

        //формирование модели представления
        viewModel = new MeasurementsViewModel
        {
            PageViewModel = new PageViewModel(count, page, pageSize),
            SortViewModel = new SortViewModel(sortOrder),
            FilterViewModel = new FilterViewModel(filterValue)
        };
    }
    #endregion
}
