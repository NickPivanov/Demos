@page "/motors"
@inject IHttpClientFactory HttpClientFactory
@inject MotorDetails MotorDetails
@inject MotorForm MotorForm

<div class="row">
    <h3>List of Motors</h3>
    @if (motors is not null)
    {
        <button class="btn btn-sm bg-success shadow text-center" style="margin-left:35px; height:30px"
                data-toggle="tooltip" data-placement="bottom" title="Add a new Motor"
                @onclick="() => ShowMotorForm()">
            <p style="color:aliceblue">Add new</p>
        </button>
    }
</div>

@if (motors is null)
{
    <a>loading data...</a>;
}

else
{
    <table class="table table-bordered table-sm">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Actions</th>

            </tr>
        </thead>
        <tbody>

            @foreach (var motor in motors)
            {
                <tr data-bind="@motor">
                    <td>@motor.Name</td>
                    <td>@motor.Type</td>

                    <td>
                        <button class="btn btn-sm btn-outline-primary"
                                type="button" data-toggle="tooltip" data-placement="bottom" title="Edit @motor.Name properties"
                                @onclick="async () => await GetMotorDetailsAsync(motor)">
                            Details
                        </button>
                        <button class="btn btn-sm btn-outline-danger"
                                type="button" data-toggle="tooltip" data-placement="bottom" title="Delete @motor.Name"
                                @onclick="async () => await DeleteMotorAsync(motor)">
                            Delete
                        </button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}

<MotorDetails SelectedMotor="@selectedMotor"
              clientService="@client"
              @ref="motorDetails"
              MotorDetailsClosed="async () => await GetMotorsDataAsync()" />

<MotorForm @ref="motorForm" ClientService="@client" MotorFormClosed="async () => await GetMotorsDataAsync()"/>


@code {
    private IHttpClientFactory httpClientFactory;
    private HttpClient httpClient;
    private MotorAPI client;
    private List<Motor> motors { get; set; }
    private Motor selectedMotor { get; set; } = new();
    private MotorDetails motorDetails { get; set; }
    private MotorForm motorForm { get; set; }

    [Parameter]
    public EventCallback<Motor> OnClickCallback { get; set; }

    protected override async Task OnInitializedAsync()
    {
        httpClientFactory = HttpClientFactory;
        motorDetails = MotorDetails;
        motorForm = MotorForm;
        httpClient = httpClientFactory.CreateClient("motorAPI");
        client = new("", httpClient);

        await GetMotorsDataAsync();
    }

    private async Task GetMotorsDataAsync()
    {
        motors = (await client.GetAllMotorsAsync()).ToList();
    }

    async Task GetMotorDetailsAsync(Motor motor)
    {
        await OnClickCallback.InvokeAsync(selectedMotor = motor);
        motorDetails.Open();
    }

    async Task DeleteMotorAsync(Motor motor)
    {
        await client.DeleteMotorAsync(motor.Id);
        await GetMotorsDataAsync();
    }

    private void ShowMotorForm()
    {
        motorForm.Open();
    }

}
