
<div class="modal" tabindex="-1" role="dialog" style="display:@MessageDisplay">
    <div class="modal-dialog modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div class="container m-0">
                    <div class="row justify-content-left">
                        <div class="col">
                            <h5 class="modal-title"><a class="badge badge-secondary">Motor</a> @SelectedMotor.Name</h5>
                            <a style="font-weight:800; color:cornflowerblue">@SelectedMotor.Type</a>
                        </div>
                        <div class="col">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="()=>Close()">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <EditForm Model="@motorModel" OnValidSubmit="@(async () => await SaveSelectedMotorChanges())">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="modal-body justify-content-center">
                    @if (SelectedMotor is not null)
                    {
                        <MotorProperties SelectedMotor="@SelectedMotor" motorValidationModel="@motorModel" />
                    }
                </div>

                <div class="modal-footer">
                    <input type="submit" class="btn btn-primary" data-dismiss="modal" value="Save changes"/>
                </div>
            </EditForm>

        </div>
    </div>
</div>

@if (Showbackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public Motor SelectedMotor { get; set; }
    [Parameter]
    public EventCallback MotorDetailsClosed { get; set; }
    [Parameter]
    public MotorAPI clientService { get; set; }

    private MotorModel motorModel { get; set; } = new();

    public Guid Guid = Guid.NewGuid();
    public string MessageDisplay = "none";
    public string ModalClass = "";
    public bool Showbackdrop = false;

    protected override void OnParametersSet()
    {
        motorModel.Name = SelectedMotor.Name;
        motorModel.Type = SelectedMotor.Type;
    }

    public void Open()
    {
        MessageDisplay = "block";
        ModalClass = "Show";
        Showbackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        MessageDisplay = "none";
        ModalClass = "";
        Showbackdrop = false;
        StateHasChanged();
        MotorDetailsClosed.InvokeAsync();
    }

    private async Task SaveSelectedMotorChanges()
    {
        SelectedMotor.Name = motorModel.Name;
        await clientService.UpdateMotorAsync(SelectedMotor);
        Close();
    }
}
