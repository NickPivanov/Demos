{
  "openapi": "3.0.1",
  "info": {
    "title": "HRAgencyAPI",
    "description": "OpenAPI for HR Agency",
    "contact": {
      "name": "Nick Pivanov",
      "email": "nick_anapa@mail.ru"
    },
    "version": "v1"
  },
  "paths": {
    "/Employee/{id}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get the Employee by Id",
        "operationId": "GetEmployeeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Uniq identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Employee",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeBase"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find a Employee by the requested id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee"
        ],
        "summary": "Delete selected Employee from database by Id",
        "operationId": "DeleteEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Error while deleting object from database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Employee": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get all Employees from database",
        "operationId": "GetAllEmplyees",
        "responses": {
          "200": {
            "description": "Returns collection of Employees",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeBase"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Database has no items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Add new EmployeeBase object to database. \r\nValues for properties Name, Group and EmployedDate are required.\r\nGroup values are:\r\n0 - Employee\r\n1 - Manager\r\n2 - Salesman",
        "operationId": "AddEmployee",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/EmployeeGroup"
            }
          },
          {
            "name": "employedDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Seccesful result of procedure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeBase"
                }
              }
            }
          },
          "400": {
            "description": "Error while adding new object to database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Sends a request on updating selected Employee",
        "operationId": "UpdateEmployee",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeBase"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeBase"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeBase"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeBase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Seccesfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeBase"
                }
              }
            }
          },
          "400": {
            "description": "Error while updating data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Employee/subordinates/{id}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get Employee's subordinates",
        "operationId": "GetSubordinatesForEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns collection of Employees",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeBase"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error on getting data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Assign subordinate for Employee",
        "operationId": "AssignSubordinateForEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subordinateId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "404": {
            "description": "Error on setting data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee"
        ],
        "summary": "Remove subordinate from Employee's subordinates list",
        "operationId": "RemoveSubordinateForEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "subordinateId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "404": {
            "description": "Error on updating data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Expenses/Calculate/{id}": {
      "get": {
        "tags": [
          "Expenses"
        ],
        "summary": "Calculate salary for Employee on selected date",
        "operationId": "CalculateSalary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Seccesfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "400": {
            "description": "Error on calculating process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Expenses/Current/{id}": {
      "get": {
        "tags": [
          "Expenses"
        ],
        "summary": "Get current salary for selected Employee",
        "operationId": "GetCurrentSalaryForEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Seccesfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "400": {
            "description": "Error getting data from database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Expenses/Total": {
      "get": {
        "tags": [
          "Expenses"
        ],
        "summary": "Calculate total personel expenses",
        "operationId": "GetTotalPersonelExpenses",
        "responses": {
          "200": {
            "description": "Seccesfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "400": {
            "description": "Error getting data from database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Set": {
      "post": {
        "tags": [
          "Expenses"
        ],
        "summary": "Save value of current salary to database for selected employee.",
        "operationId": "SetEmployeeCurrentSalary",
        "parameters": [
          {
            "name": "employee_id",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "currentSalary",
            "in": "query",
            "description": "",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Seccesfully saved"
          },
          "400": {
            "description": "Error while adding data to database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EmployeeBase": {
        "required": [
          "employedDate",
          "group",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 50,
            "type": "string"
          },
          "leadId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "employedDate": {
            "type": "string",
            "format": "date-time"
          },
          "group": {
            "$ref": "#/components/schemas/EmployeeGroup"
          },
          "salaryBase": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EmployeeGroup": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      }
    }
  }
}