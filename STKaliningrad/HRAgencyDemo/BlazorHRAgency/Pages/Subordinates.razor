@page "/subordinates/{id}"
@inject IHttpClientFactory httpClientFactory
@attribute [Authorize]


@if (selectedEmployee is not null)
{
    <div class="card alert-primary" style="width:fit-content">@selectedEmployee.Name subordinates:</div>
    <table class="table table-bordered table-sm">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Actions</th>

            </tr>
        </thead>
        <tbody>

            @foreach (var employee in SubsDictionary)
            {
                <tr data-bind="@employee">
                    <td>@employee.Key.Name</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary"
                                type="button" data-toggle="tooltip" data-placement="bottom" title="Add" disabled="@employee.Value"
                                @onclick="async () => await AssignSubordinateAsync(employee.Key.Id)">
                            Add
                        </button>
                        <button class="btn btn-sm btn-outline-danger"
                                type="button" data-toggle="tooltip" data-placement="bottom" title="Remove"
                                @onclick="async () => await RemoveSubordinateAsync(employee.Key.Id)">
                            Remove
                        </button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}


@code {

    [Parameter] public string Id { get; set; }
    protected int id { private set; get; }

    private IHttpClientFactory _httpClientFactory;
    private HttpClient httpClient;
    private hrClient client;

    private EmployeeBase selectedEmployee { get; set; }
    private Dictionary<EmployeeBase, bool> SubsDictionary { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _httpClientFactory = httpClientFactory;
        httpClient = _httpClientFactory.CreateClient("hrAPI");
        client = new hrClient("", httpClient);

        id = int.Parse(Id);
        selectedEmployee = await client.GetEmployeeByIdAsync(id);
        await FillDictionaryAsync();
    }

    private async Task FillDictionaryAsync()
    {
        var employees = (await client.GetAllEmplyeesAsync()).ToList();
        var subordinates = (await client.GetSubordinatesForEmployeeAsync(selectedEmployee.Id)).ToList();
        foreach (var item in subordinates)
        {
            SubsDictionary.Add(item, true);
        }

        employees = (from e in employees
                     where e.Name != selectedEmployee.Name
                     select e).ToList();
        employees = subordinates.Any() ?
            (from e in employees
             from s in subordinates
             where e.Name != s.Name
             select e).ToList() :
             employees;


        foreach (var item in employees)
        {
            SubsDictionary.Add(item, false);
        }

    }

    private async Task AssignSubordinateAsync(int subordinate_id)
    {
        var key = SubsDictionary.First(n => n.Key.Id == subordinate_id).Key;
        SubsDictionary[key] = true;
        await client.AssignSubordinateForEmployeeAsync(selectedEmployee.Id, subordinate_id);
    }

    private async Task RemoveSubordinateAsync(int subordinate_id)
    {
        var key = SubsDictionary.First(n => n.Key.Id == subordinate_id).Key;
        SubsDictionary[key] = false;
        await client.RemoveSubordinateForEmployeeAsync(selectedEmployee.Id, subordinate_id);
    }
}
