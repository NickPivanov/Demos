@page "/salary/{id}"
@inject IHttpClientFactory httpClientFactory
@attribute [Authorize]

<h3>Employee Page</h3>
@if (employee is null)
{
    <p>Loading...</p>
}
else
{
    <div class="container">
        <div class="row justify-content-sm-start">
            <div class="col-auto">
                <div class="card">
                    <div class="card-header">
                        @employee.Name
                    </div>
                    <div class="card-body">
                        <EmployeeCard Employee="@employee" CurrentSalary="GetCurrentSalary()" />
                        @if (@employee.Group != EmployeeGroup.Employees)
                        {
                            <p class="badge badge-secondary">Subordinates salary: </p>
                            @foreach (var s in GetSubordinates(employee.Id))
                            {
                                <ul>
                                    <li>@s.Key - @s.Value</li>
                                </ul>
                            }

                        }
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-outline-secondary" type="button" @onclick="async () => await RecalculateSalary()">Recalculate salary</button>
                    </div>
                </div>
            </div>

        </div>
    </div>
    <br />

    <b>Calculate salary on date: </b>
    <div class="input-group">
        <input type="date" @bind-value="date" />
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" @onclick="@(async () => await CalculateSalaryOnSelectedDate())">Calculate</button>
        </div>
        <div class="input-group-append" style="margin-left: 15px">
            <b class="m-sm-1" style="font-size: 18px">@estimated_salary</b>
        </div>
    </div>

}


@code {
    [Parameter] public string Id { get; set; }
    protected int id { private set; get; }

    private IHttpClientFactory _httpClientFactory;
    private HttpClient httpClient;
    private hrClient client;

    private EmployeeBase employee { get; set; }
    private DateTime date { get; set; } = DateTime.Today.AddYears(1);
    private double estimated_salary = 0;

    protected override async Task OnInitializedAsync()
    {
        _httpClientFactory = httpClientFactory;
        httpClient = _httpClientFactory.CreateClient("hrAPI");
        client = new hrClient("", httpClient);

        id = int.Parse(Id);
        employee = await client.GetEmployeeByIdAsync(id);

    }

    private double GetCurrentSalary()
    {
        try
        {
            return client.GetCurrentSalaryForEmployeeAsync(id).Result;
        }

        catch
        {
            client.SetEmployeeCurrentSalaryAsync(id, employee.SalaryBase).Wait();
            return client.GetCurrentSalaryForEmployeeAsync(id).Result;
        }
    }

    private async Task CalculateSalaryOnSelectedDate()
    {
        if (date < employee.EmployedDate)
        {
            estimated_salary = employee.SalaryBase;
        }

        estimated_salary = await client.CalculateSalaryAsync(id, date.Date);
    }

    private Dictionary<string, double> GetSubordinates(int id)
    {
        var subs = client.GetSubordinatesForEmployeeAsync(id).Result
            .ToList();

        Dictionary<string, double> result = new();
        foreach (var e in subs)
        {
            result.Add(e.Name, client.GetCurrentSalaryForEmployeeAsync(e.Id).Result);
        }

        return result;
    }

    private async Task RecalculateSalary()
    {
        var salary = await client.CalculateSalaryAsync(id, DateTime.Today);
        await client.SetEmployeeCurrentSalaryAsync(id, salary);
        StateHasChanged();
    }
}
