@page "/"
@inject UserManager<EmployeeIdentity> UserManager

<div class="row justify-content-center">
    <div class="col-md-6">  
        <div class="badge-primary" style="width:fit-content">
            <h1>HR Agency app</h1>
        </div>

        <AuthorizeView Roles="admin">
            <Authorized>
                <a href="/rolemanagement">Users administration</a>
                <br />
            </Authorized>
        </AuthorizeView>
        <AuthorizeView Roles="employee, admin">
            <Authorized>
                <a href="/salary/@id">Salary information</a>
            </Authorized>
            <NotAuthorized>
                Log in or register to view the information
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>


@code{

    private int id { set; get; }
    AppState appState = new();

    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }

    UserManager<EmployeeIdentity> userManager { get; set; }
    private AuthenticationState userState;
    private EmployeeIdentity user;
    private HRClientService _hrClientService;

    protected override async Task OnInitializedAsync()
    {
        userManager = UserManager;
        userState = await authState;
        _hrClientService = hrClientService;

        appState.EmployeeId = 0;
        if (userState.User.Identity.IsAuthenticated)
        {
            await ConfigureOnSuccessLoginAsync();
        }
    }

    private async Task ConfigureOnSuccessLoginAsync()
    {
        user = await userManager.FindByNameAsync(userState.User.Identity.Name);
        id = (await _hrClientService.HrClient
            .GetAllEmplyeesAsync()).FirstOrDefault(e => e.Name == user.Name).Id;
        AppState.EmployeeId = id;
    }

}