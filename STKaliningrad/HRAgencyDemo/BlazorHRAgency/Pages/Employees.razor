@page "/employees"
@inject DetailsDialog EmployeeDetails
@attribute [Authorize(Roles ="admin")]

@if (employees is null)
{
    <p>Loading data...</p>
}
else
{
    <h3>Employees: @employees.Count()</h3>
    <table class="table table-bordered table-sm">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Employed</th>
                <th>Position</th>
                <th>Subordinates</th>
                <th>Salary</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr data-bind="@employee">
                    <td>@employee.Name</td>
                    <td>@employee.EmployedDate.Date.ToShortDateString()</td>
                    <td>@employee.Group</td>
                    @if (employee.Group != EmployeeGroup.Employees)
                    {
                        <td>
                            <a href="/subordinates/@employee.Id">@GetSubordinates(employee.Id).Count</a>
                        </td>
                    }
                    else
                    {
                        <td>-</td>
                    }
                    <td>@GetCurrentSalaryForEmployee(employee.Id)</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary"
                                type="button" data-toggle="tooltip" data-placement="bottom" title="Edit"
                                @onclick="async () => await GetEmployeeDetailsAsync(employee)">
                            Edit
                        </button>
                        <button class="btn btn-sm btn-outline-danger"
                                type="button" data-toggle="tooltip" data-placement="bottom" title="Delete"
                                @onclick="async () => await DeleteEmployeeAsync(employee.Id)">
                            Delete
                        </button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
    <div class="container m-0 ">
        <div class="row justify-content-sm-end">
            <div class="col col-sm-8" />
            <div class="col-auto">
                <small class="text-muted align-items-end">Total personel expenses: @totalPersonelExpenses</small>
            </div>
            <div class="col col-sm-0" />
        </div>
    </div>
}

<DetailsDialog clientService="@_hrClientService.HrClient" 
         SelectedEmployee="@selectedEmployee"
         @ref="employeeDetails"
         CurrentSalary="selectedEmployeeCurrentSalary"
         EmployeeDetailsDialogClosed="@(async () => await GetEmployeesDataAsync())">
</DetailsDialog>

@code {
    [Parameter]
    public EventCallback<EmployeeBase> OnClickCallback { get; set; }

    private HRClientService _hrClientService;
    private DetailsDialog employeeDetails { get; set; }
    private EmployeeBase selectedEmployee { get; set; } = new();
    private List<EmployeeBase> selectedSubordinates { get; set; }
    private double selectedEmployeeCurrentSalary = 0;
    private double totalPersonelExpenses = 0;

    private List<EmployeeBase> employees { get; set; }

    protected override async Task OnInitializedAsync()
    {
        employeeDetails = EmployeeDetails;
        _hrClientService = hrClientService;
        await GetEmployeesDataAsync();
    }

    private async Task GetEmployeesDataAsync()
    {
        employees = (await _hrClientService.HrClient.GetAllEmplyeesAsync()).ToList();
        totalPersonelExpenses = await _hrClientService.HrClient.GetTotalPersonelExpensesAsync();
    }

    private List<string> GetSubordinates(int id)
    {
        var subs = _hrClientService.HrClient.GetSubordinatesForEmployeeAsync(id).Result;
        selectedSubordinates = subs.ToList();
        return subs.Select(n => n.Name).ToList();
    }

    private double GetCurrentSalaryForEmployee(int id)
    {
        var result = _hrClientService.HrClient.GetCurrentSalaryForEmployeeAsync(id).Result;
        selectedEmployeeCurrentSalary = result;
        return result;
    }

    private async Task DeleteEmployeeAsync(int id)
    {
        await _hrClientService.HrClient.DeleteEmployeeAsync(id);
        StateHasChanged();
    }

    private async Task GetEmployeeDetailsAsync(EmployeeBase employee)
    {
        await OnClickCallback.InvokeAsync(selectedEmployee = employee);
        employeeDetails.Open();
    }
}
