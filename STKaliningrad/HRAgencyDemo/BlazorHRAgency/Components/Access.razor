
<div class="modal" tabindex="-1" role="dialog" style="display:@MessageDisplay">
    <div class="modal-dialog modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div class="container m-0">
                    <div class="row justify-content-left">
                        <div class="col">
                            <h5 class="modal-title"><a class="badge badge-secondary">User</a> @UserRoleEdit.UserName</h5>
                        </div>
                        <div class="col">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="()=>Close()">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <EditForm Model="@userRoleEdit" OnSubmit="@(async () => await SaveChanges())">
                <div class="modal-body justify-content-center">
                    <div class="form-group">
                        @foreach (IdentityRole role in userRoleEdit.RolesCollection)
                        {
                            <input type="checkbox" name="roles" value="@role.Name" @onchange="()=>AddRole(role.Name)" 
                                   checked="@(HasRole(role.Name))"/>@role.Name <br />
                         }
                    </div>

                </div>
                <div class="modal-footer">
                    <input type="submit" class="btn btn-primary" data-dismiss="modal" value="Save changes" />
                </div>
            </EditForm>

        </div>
    </div>
</div>

@code {
    [Parameter]
    public RoleEdit UserRoleEdit { get; set; }
    [Parameter]
    public EventCallback AccessClosed { get; set; }
    [Parameter] public UserManager<EmployeeIdentity> UserManager { get; set; }

    private RoleEdit userRoleEdit { get; set; }
    private List<string> rolesAdded { get; set; } = new();

    public Guid Guid = Guid.NewGuid();
    public string MessageDisplay = "none";
    public string ModalClass = "";
    public bool Showbackdrop = false;

    protected override void OnParametersSet()
    {
        userRoleEdit = UserRoleEdit;
        rolesAdded = userRoleEdit.UserRoles.ToList();
    }

    public void Open()
    {
        MessageDisplay = "block";
        ModalClass = "Show";
        Showbackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        MessageDisplay = "none";
        ModalClass = "";
        Showbackdrop = false;
        StateHasChanged();
        AccessClosed.InvokeAsync();
    }

    private bool HasRole(string roleName)
    {
        return rolesAdded.Any(n => n == roleName);
    }

    private void AddRole(string role)
    {
        if (!rolesAdded.Any(r => r == role))
        {
            rolesAdded.Add(role);
        }
        else
            rolesAdded.Remove(role);
    }

    private async Task SaveChanges()
    {
        var user = await UserManager.FindByIdAsync(UserRoleEdit.UserId);
        var removedroles = userRoleEdit.RolesCollection.Select(r => r.Name).Except(rolesAdded);
        await UserManager.AddToRolesAsync(user, rolesAdded);
        await UserManager.RemoveFromRolesAsync(user, removedroles);
        Close();
    }
}