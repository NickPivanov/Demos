<div class="modal" tabindex="-1" role="dialog" style="display:@MessageDisplay">
    <div class="modal-dialog modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div class="container m-0">
                    <div class="row justify-content-left">
                        <div class="col">
                            <h5 class="modal-title"><a class="badge badge-secondary">Employee</a> @SelectedEmployee.Name</h5>
                        </div>
                        <div class="col">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="()=>Close()">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <EditForm Model="@employeeModel" OnValidSubmit="@(async () => await SaveChanges())">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="modal-body justify-content-center">
                    @if (SelectedEmployee is not null)
                    {
                        <div class="form-group">
                            <label for="Name" class="badge badge-secondary" style="font-size: 15px">Name</label>
                            <input type="text" @bind-value="@employeeModel.Name" placeholder="Enter name" style="margin-left:1px" />
                        </div>
                        <div class="form-group">
                            <div class="row" style="margin-left:1px">
                                <label for="Type" class="badge badge-secondary" style="font-size: 15px">Group</label>
                                <input type="text" @bind-value="@employeeModel.Group" style="visibility:hidden; width:1px" readonly />
                                <select class="form-control" style="width:200px" @bind="@employeeModel.Group">
                                    @foreach (var item in Templates)
                                    {
                                        <option value=@item>@item</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="EmployedDate" class="badge badge-secondary" style="font-size: 15px">Employed</label>
                            <input type="date" @bind-value="@employeeModel.EmployedDate" style="margin-left:1px" readonly />
                        </div>
                        <div class="form-group">
                            <label for="salaryBase" class="badge badge-secondary" style="font-size: 15px">Salary base</label>
                            <input type="text" @bind-value="@salaryBase" style="margin-left:1px" readonly />
                        </div>
                        <div class="form-group">
                            <label for="currentSalary" class="badge badge-secondary" style="font-size: 15px">Current Salary</label>
                            <input type="text" @bind-value="@currentSalary" style="margin-left:1px" readonly />
                        </div>
                    }

                </div>

                <div class="modal-footer">
                    <input type="submit" class="btn btn-primary" data-dismiss="modal" value="Save changes" />
                </div>
            </EditForm>


        </div>
    </div>
</div>

@code {
    [Parameter]
    public EmployeeBase SelectedEmployee { get; set; }
    [Parameter]
    public EventCallback EmployeeDetailsDialogClosed { get; set; }
    [Parameter]
    public hrClient clientService { get; set; }
    [Parameter]
    public double CurrentSalary { get; set; }

    private Data.EmployeeModel employeeModel { get; set; } = new();
    private List<string> Templates => Enum.GetNames(typeof(EmployeeGroup)).ToList();

    private double salaryBase = 0;
    private double currentSalary = 0;

    public Guid Guid = Guid.NewGuid();
    public string MessageDisplay = "none";
    public string ModalClass = "";
    public bool Showbackdrop = false;

    protected override void OnParametersSet()
    {
        employeeModel.Name = SelectedEmployee.Name;
        employeeModel.Group = SelectedEmployee.Group;
        employeeModel.EmployedDate = SelectedEmployee.EmployedDate.Date;
        salaryBase = SelectedEmployee.SalaryBase;
        currentSalary = CurrentSalary;
    }

    public void Open()
    {
        MessageDisplay = "block";
        ModalClass = "Show";
        Showbackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        MessageDisplay = "none";
        ModalClass = "";
        Showbackdrop = false;
        StateHasChanged();
        EmployeeDetailsDialogClosed.InvokeAsync();
    }

    private async Task SaveChanges()
    {
        SelectedEmployee.Name = employeeModel.Name;
        SelectedEmployee.Group = employeeModel.Group;
        await clientService.UpdateEmployeeAsync(SelectedEmployee);
        Close();
    }
}

